name: Terraform OPA Policy Enforcement

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

# permissions:
#   contents: write
#   pull-requests: write
#   id-token: write

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'ap-south-1' }}

jobs:
  terraform_plan_and_opa_check:
    runs-on: ubuntu-latest
    permissions:
      contents: read # Required to checkout the repo
      pull-requests: write # Required to comment on PRs (optional, but good for feedback)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          # Important: Disable terraform_wrapper if you encounter issues with OPA parsing the JSON.
          # The wrapper adds metadata that can sometimes interfere with JSON parsing.
          terraform_wrapper: false 
      
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: ${{ vars.AWS_ROLE_ARN }}
      #     aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=tfplan.binary
          # Convert the binary plan to JSON for OPA
          terraform show -json tfplan.binary > tfplan.json

      - name: Setup OPA
        uses: open-policy-agent/setup-opa@v2
        with:
          version: latest # Or a specific version like '0.66.0'

      - name: Evaluate Terraform Plan with OPA
        id: opa_eval
        # Evaluate the plan against your policies.
        # data.terraform.aws.s3.deny is the rule we want to query.
        # It will return 'true' if the policy is violated.
        # The '-v' flag provides verbose output, which is helpful for debugging.
        run: |
          OPA_RESULT=$(opa eval --data policy/s3_public_access.rego --input tfplan.json "data.terraform.aws.s3.deny" --fail-defined 2>&1)
          
          # Check if OPA_RESULT contains 'true' indicating a policy violation
          if echo "$OPA_RESULT" | grep -q "true"; then
            echo "OPA policy violation detected!"
            
            # Get the deny message
            OPA_MESSAGE=$(opa eval --data policy/s3_public_access.rego --input tfplan.json "data.terraform.aws.s3.deny_message" --format raw)
            echo "OPA_MESSAGE=$OPA_MESSAGE" >> $GITHUB_ENV
            echo "OPA_POLICY_VIOLATION=true" >> $GITHUB_ENV
            exit 1 # Fail the step
          else
            echo "No OPA policy violations detected."
            echo "OPA_POLICY_VIOLATION=false" >> $GITHUB_ENV
          fi

      - name: Post OPA results to PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          OPA_VIOLATION: ${{ env.OPA_POLICY_VIOLATION }}
          OPA_DENY_MESSAGE: ${{ env.OPA_MESSAGE }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan Policy Check (OPA)
            
            ${process.env.OPA_VIOLATION === 'true' ? '**Policy Violation Detected!**' : '**No Policy Violations**'}
            
            <details><summary>Show OPA Details</summary>
            
            \`\`\`
            ${process.env.OPA_VIOLATION === 'true' ? process.env.OPA_DENY_MESSAGE : 'No violations found by OPA.'}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })